(ns Player
  (:gen-class))

(defn err [& out]
 (binding [*out* *err*]
  (apply print out))   
    (binding [*out* *err*] (println))
)

(defn rlineTest [height]
 (loop [ h height acc [] ]
    (if(= h 0) acc
        (
            recur (- h 1) (conj acc h)
        )
    )
 )

)

(defn mapCtoBool [c]
    (if (= c \.) false true)
)

(defn boolit [st]
    (map mapCtoBool
         (reverse (seq st))
    )
)

(defn rline [height]
 (loop [ h height acc [] ]
    (if(= h 0) (reverse acc)
        (
            recur (- h 1) (conj acc (boolit (read-line)) )
        )
    )
 )

)

(defn coord [width height ll] 
     (loop [w width acc []]
           
           )(loop [w width acc []]
        (if (= w 0) (reverse acc)
            (
                recur (- w 1) (conj acc 
                                    (
                                        if (nth ll (- w 1))
                                            [(- width w) height]
                                            nil
                                        
                                    
                                    )
                )
            )
        )
     )
)

(defn allcoord [width heigh ll]
       (loop [h heigh acc []]
            (if (= h 0) acc
                (
                    recur (- h 1) (conj  acc
                                        (coord width (- h 1) (nth ll (- heigh h))
                                        )
                                    
                                        
                                    )
                )
            )             
       )
)

; Don't let the machines win. You are humanity's last hope...
(defn entrypoint []
   (do
   ; (println "my fun")  
    (def width (read))
    (def height (read))
    (read-line)
    (err "my fun")  
    (err "width=" width " " "height=" height )    
    (err (rlineTest height))
    (def rl (rline height))
    (err rl)
    (err (first rl))
    (err (nth (first rl) 1))
    (err (allcoord width height rl))
    (def invco (allcoord width height rl))
   )
    
)

(defn -main [& args]
    (entrypoint)

    
    ; Three coordinates: a node, its right neighbor, its bottom neighbor
    (println "0 0 1 0 0 1"))